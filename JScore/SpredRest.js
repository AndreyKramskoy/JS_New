/*
Когда мы видим "..." в коде, это могут быть как остаточные параметры, так и оператор расширения.
Как отличить их друг от друга:
Если ...(rest) располагается в конце списка параметров функции, то это «остаточные параметры». Он собирает остальные неуказанные аргументы и делает из них массив.
Если ...(spread) встретился в вызове функции или где-либо ещё, то это «оператор расширения». Он извлекает элементы из массива.
Полезно запомнить:
Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
С помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов.
Вместе эти конструкции помогают легко преобразовывать наборы значений в массивы и обратно.
==========================================================================================================
Операторы `spread` и `rest` оба используют троеточие (`...`) в JavaScript, но они выполняют разные функции и применяются в разных контекстах.
**Spread (распространение):**
1. **Spread оператор (`...`) используется для развертывания элементов массива или объекта.** Например, он может использоваться для создания нового массива с элементами из существующего массива, для передачи элементов массива в функцию в качестве аргументов или для создания нового объекта на основе существующего объекта. Пример:
   const arr = [1, 2, 3];
   const newArr = [...arr]; // Создание нового массива с элементами из arr   
   В этом случае `...arr` разворачивает элементы массива `arr` в новом массиве `newArr`.

**Rest (оставшиеся параметры):**
1. **Rest параметр (`...`) используется в функциях для сбора оставшихся аргументов в массив.** Он позволяет функции принимать произвольное количество аргументов, и оставшиеся аргументы собираются в массив. 
Пример:
   function sum(...numbers) {
     return numbers.reduce((acc, num) => acc + num, 0);
   }
   const result = sum(1, 2, 3, 4); // Оставшиеся аргументы (2, 3, 4) собираются в массив numbers
      В этом случае `...numbers` собирает оставшиеся аргументы в массив `numbers`, который можно использовать внутри функции.
+++Итак, основное отличие заключается в том, как они используются:+++
- `Spread` используется для развертывания элементов массива или объекта, распространения их в новый контекст.
- `Rest` используется для сбора оставшихся аргументов функции в массив, что позволяет функции работать с переменным числом аргументов.
*/
//Spread позволяет создавать копию масива, объединять несколько массивов, объединять строки с массивами в новом массиве
const citiesR = ['Mon', 'Rum', 'Hop'];
const citiesE = ['Gdan', 'War', 'Rom', 'Hur'];

//example with Array
const allCities = [...citiesR, 'Andrey', ...citiesE];
console.log(allCities);

//example with Object
const citiesRWithPopulation = {
  Mon: 33,
  Rum: 12,
  Hop: 10,
};
const citiesEWithPopulation = {
  Gdan: 30,
  War: 22,
  Rom: 40,
  Hur: 15,
};
//Rest позволяет собирать оставшиеся элементы в массив
//например есть массив чисел и нам нужно получить их сумму
const arr = [1, 4, 5, 3, 6, 7, 8, 3];
function sumArr(a, b, ...rest) {
  //а вот здесь Rest
  return a + b + rest.reduce((a, i) => a + i, 0);
}
console.log(sumArr(...arr)); //здесь используем Spread
