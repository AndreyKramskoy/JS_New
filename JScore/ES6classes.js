class Animal {
  //у класса могут быть статические методы или переменные которые доступны только внутри данного класса. т.е обратиться к нм можно только через Animal.type
  static type = 'Animal';
  //для инициализации начальных значений объекта данного класа используется специальный метод constructor
  constructor(options) {
    //мы принимаем в него некоторый объект. и через ключевое слово this инициализируем элементы объекта
    this.name = options.name;
    this.age = options.age;
    this.hasTail = options.hasTail;
  }
  // в классе можно реализовывать методы которые попадут в будущие объекты
  voice() {
    console.log('i am animal');
  }
}
// теперь мы можем создавать новые объекты с помощью созданного класса
const animal = new Animal({
  //в круглые скобки мы передаем значения для создаваемого объекта
  name: 'Animal',
  age: 5,
  hasTail: true,
});
//получается что animal теперь является наследником прототипа Animal который уже в свою очередь имеет прототип класс Object
// классы удобны тем что можно полноценно использовать наследование например:
class Cat extends Animal {
  //с пом ключ слова extends мы указываем что будем наследовать наш класс от родительского класса наприм Animal
  constructor(options) {
    super(options); //когда мы реализовываем конструктор в дочернем классе нам нужно вызвать родительский конструктор, для этого используется метод super в который нужно передать набор опций
    this.color = options.color;
  }
  //так же в созданном класе можно переписать методы родительского класса например
  voice() {
    console.log('i am cat'); //данный метод перетирает родительский и будет выводить текущее. если нам нужно чтобы и родительский метод вызывался в текущий нужно добавить super и использ его как объект обращаясь уже к методу в нашем родительском классе super.voice()
    super.voice();
  }

  //так же в классе могут присутствовать get set
  get ageInfo() {
    return this.age + 10;
  }
  set ageInfo(newAge) {
    this.age = newAge;
  }
}
//теперь мы можем создавать новые объекты
const cat = new Cat({
  name: 'Cat',
  age: 7,
  hasTail: true,
  //например если мы хотим передавать ещё что-то в конструктор чего нет в родительском классе
  color: 'black', //например цвет мы хотим присваивать только для кошек. для этого нам нужно в класс Cat передать новый конструктор
});
//благодаря протоипированию мы можем использовать в созданном объекте в том числе методы из родительского класса например voice()
