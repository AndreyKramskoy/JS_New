/*
Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.
Методы и свойства:
new Map() – создаёт коллекцию.
map.set(key, value) – записывает по ключу key значение value.
map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
map.delete(key) – удаляет элемент (пару «ключ/значение») по ключу key.
map.clear() – очищает коллекцию от всех элементов.
map.size – возвращает текущее количество элементов.

Отличия от обычного объекта Object:
Что угодно может быть ключом, в том числе и объекты.
Есть дополнительные методы, свойство size.
*/
const users = [{ name: 'Andrey' }, { name: 'Aliona' }, { name: 'Veronica' }];
const visits = new Map();
visits
  .set(users[0], new Date())
  .set(users[1], new Date(new Date().getDate() + 1000 * 60))
  .set(users[2], new Date(new Date().getDate() + 5000 * 60));
function lastVisit(user) {
  return visits.get(user);
}
console.log(lastVisit(users[1]));

//===========================================================================================================
/*
Set – коллекция уникальных значений, так называемое «множество».
Методы и свойства:
new Set(iterable) – создаёт Set, можно указать перебираемый объект со значениями для инициализации.
set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
set.delete(value) – удаляет значение, возвращает true если value было в множестве на момент вызова, иначе false.
set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
set.clear() – удаляет все имеющиеся значения.
set.size – возвращает количество элементов в множестве.
*/
const set = new Set([1, 2, 2, 3, 4, 5, 5, 6]);
console.log(set);
