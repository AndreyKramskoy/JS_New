//для вызова файла в консоли нужно прописать node <name> можно не указываь расширение т.к. NodeJS подставляет .js
//console.log('Hello NodeJS');
//так же в NodeJS существует менеджер пакетов который называется npm NodePackageManager
/*
npm -v -вернет версию менеджера тем самым дав понять что он установлен и подкл

npm init - позволяет проинициализировать проект, при вводе команды мы попадает в меню создания проекта где ответив на несколько вопросов получим на выходе файлы package.json(где будет храниться список зависимостей для приложения)

npm install или npm i <package_name> - без имени мы установим все пакеты по умолчанию(или подтянем пакеты находящиеся уже в списке файла package.json если мы стянули себе существующий проект и будем с ним работать)
все скачанные пакеты хранятся в папке node_modules
если мы устан пакет как зависимость для проекта он попадает в dependencies нашего файла package.json. есть ещё devDependencies туда нужно устанавливать пакеты которые нужны именно для разработки и это указывается при npm install <package_name> и добавить флаг -D
*/

//!!!чтобы подключить необходимый пакет в процессе написания кода в файле мы прописываем след!!!
/*
например нам нужно подключить в файле наш ранее установленный пакет chalk мы создаем константу с именем нашего пакета чтобы не путаться и присваиваем ей абсолютный путь к папке пакета
const chalk = require("chalk")
ПРИМЕР:
*/
const chalk = require('chalk'); //мы подключили chalk
console.log(chalk.blue('Hello JS')); // и вызвали в консоль текст синего цвета

// NodeJS позволяет создавать собственные модули в которых буду храниться переменные функции или ещё что-то что мы хотим передавать из данного файла в другой
/*
для этого в файле который мы хотим передавать необходимо ссылаться на передаваемые пременные 
например как в файле from.js:
const data = 'Hello NodeJS'
module.exports = text

а в файле который получает данные из from.js например в текущем нужно создать переменную которой присвоим путь к файлу from.js:
const text = require('./from') . - это относительный путь потом / и имя файла

console.log(chalk.blue(text)); теперь можем передавать переменную text из файла from 
*/
const text = require('./from');
console.log(chalk.blue(text));

//Собственные МОДУЛИ NodeJS:
//==================================== path ================================================================//
const path = require('path'); //подключаем встроенный модуль
//1) вернуть название файла можно с пом .basename:
console.log(path.basename(__filename)); // мы обращаемся к библ path вызываем метод .basename и передаем переменную __filename
//2) вернуть название директории с пом .dirname
console.log(path.dirname(__filename)); //c:\Users\Andrei_Kramski\source\repos\JS_New\NodeJS
//3) вернуть расширение файла с пом .extname
console.log(path.extname(__filename)); //.js
//с пом метода parse мы получим объект где будут расписаны все осн элементы файла например
console.log(path.parse(__filename)); /*
{
    root: 'c:\\',
    dir: 'c:\\Users\\Andrei_Kramski\\source\\repos\\JS_New\\NodeJS',
    base: 'tempCodeRunnerFile.js',
    ext: '.js',
    name: 'tempCodeRunnerFile'
}
  */
//так же с пом .join(__dirname,<name>,<name>,...)мы можем указывать путь к нужным файлам проходя от начала текущей директории по всем папкам или файлам до нужного нам
console.log(path.join(__dirname, 'folder1', 'file1.html'));

//==================================== fs ================================================================//
const fs = require('fs');
const path = require('path'); //подключаем константу fs из модуля fs(file system) позволяет нам работать с различными файлами. так же нужно будет подключать и const path = require('path'); чтобы работать с путями в нужном нам файле
//1) можно создавать папки исп .mkdir(асинхронные)
fs.mkdir(path.join(__dirname, 'test'), (err) => {
  // указываем текущ директ, папку которую создаем, функцию колбэка и в первом параметре функции указ обяз err т.к при работе с асинхрон функ это правило которое нужно соблюд
  if (err) {
    // далее проверяем если ошибка есть, мы выбрасываем оповещение
    throw err;
  } //если ошибки нет создаем папку и выводим console.log
  console.log('Папка создана'); //мы создали новую папку test в текущей директории. НО повторно создать такую же нельзя!
});
//2) мы можем создавать новые файлы исп метод .writeFile
const fs = require('fs');
const path = require('path'); //подключили модули
const filePath = path.join(__dirname, 'test', 'test.txt'); //указали путь куда создаем файл
fs.writeFile(filePath, 'some content', (err) => {
  //указ параметр где будет храниться файл, его содержимое, и цколбэк функцию и не забываем про ошибку в случ неудачи
  if (err) {
    throw err;
  }
  console.log('file has been created'); // создали файл и получили инфу в консоль.! Данный метод переписывает содержимое файла при каждом выполнении
});
//3) чтобы добавить инфу в файл не перетирая его вместо .writeFile НУЖНО использовать .appendFile с ним все так же только инфа не перетирается
//4) мы можем так же читать файлы используя метод .readFile (асинхронные)
const fs = require('fs');
const path = require('path'); //подключили модули
const filePath1 = path.join(__dirname, 'test', 'test.txt'); //указали путь куда создаем файл
fs.readFile(filePath1, 'utf-8', (err, content) => {
  //так же принимает в параметры путь к файлу, чтобы вывести не буфером а читаемым инфу контекста указываем кодировку, и далее колбэк функцию с пом которой выводим либо ошибку либо инфу в консоль в нашем случ
  if (err) {
    throw err;
  }
  console.log('Content:', content); // Content: some content из нашего файла test.txt
});

//==================================== os ================================================================//
//даннаый модуль позволяет работать с операционной системой компа
/* 1) .platform() - позволяет определить платворму системы
   2) .arch() - позволяет определить архитектуру процессора
   3) .cpus() - позволяет получить информацию о процессорах
   4) .freemem() - позволяет узнать объем свободной памяти
   5) .totalmem() - позвол узнать общий объем памяти
   6) .homedir() - узнать домашнюю директорию
   7) .uptime() - узнать сколько включена система
*/
const os = require('os');
console.log('Operation system:', os.platform()); //Operation system: win32
console.log('Архитектура проц:', os.arch()); //Архитектура проц: x64
console.log('Архитектура проц:', os.cpus()); // получаем массив объектов с данными
